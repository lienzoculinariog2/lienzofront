ðŸ“˜ EspecificaciÃ³n de API de Productos â€” Lienzo Culinario
Este documento describe los endpoints necesarios para la demo del sistema de productos, incluyendo la visualizaciÃ³n general, el detalle individual y la creaciÃ³n de nuevos productos desde el panel de administrador. La API debe seguir un formato RESTful, con respuestas en JSON y encabezados Content-Type: application/json.

ðŸ”¹ Estructura esperada de un producto (IProduct)
json
{
  "id": "uuid-string",
  "name": "string",
  "description": "string",
  "price": number,
  "stock": number,
  "imgUrl": "string (URL)",
  "isActive": boolean,
  "categories_id": "uuid-string",
  "caloricLevel": number,
  "ingredients": ["string"]
}
ðŸ”— Endpoints requeridos
1. GET /products â€” Obtener todos los productos
Solicitud:

MÃ©todo: GET

URL: http://localhost:3001/products

Respuesta esperada: CÃ³digo: 200 OK Tipo: application/json Cuerpo:

json
[
  {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "name": "Milanesa con arroz",
    "description": "Es una milanesa que ademÃ¡s tiene arroz. Es una milanesa con arroz.",
    "price": 450.0,
    "stock": 3,
    "imgUrl": "https://ik.imagekit.io/xiqknvpxxh/Lienzo%20Culinario/Gemini_Generated_Image_q8noseq8noseq8no.png",
    "isActive": true,
    "categories_id": "550e8400-e29b-41d4-a716-446655440000",
    "caloricLevel": 5,
    "ingredients": ["carne", "grano", "verdura"]
  }
]
2. GET /products/:id â€” Obtener detalle de un producto
Solicitud:

MÃ©todo: GET

URL: http://localhost:3001/products/550e8400-e29b-41d4-a716-446655440000

Respuesta esperada: CÃ³digo: 200 OK Tipo: application/json Cuerpo:

json
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "name": "Milanesa con arroz",
  "description": "Es una milanesa que ademÃ¡s tiene arroz. Es una milanesa con arroz.",
  "price": 450.0,
  "stock": 3,
  "imgUrl": "https://ik.imagekit.io/xiqknvpxxh/Lienzo%20Culinario/Gemini_Generated_Image_q8noseq8noseq8no.png",
  "isActive": true,
  "categories_id": "550e8400-e29b-41d4-a716-446655440000",
  "caloricLevel": 5,
  "ingredients": ["carne", "grano", "verdura"]
}
Errores esperados:

404 Not Found si el id no existe

3. POST /products â€” Crear un nuevo producto
Solicitud:

MÃ©todo: POST

URL: http://localhost:3001/products

Headers:

Content-Type: application/json

Body:

json
{
  "name": "Milanesa con arroz",
  "description": "Es una milanesa que ademÃ¡s tiene arroz. Es una milanesa con arroz.",
  "price": 450.0,
  "stock": 3,
  "imgUrl": "https://ik.imagekit.io/xiqknvpxxh/Lienzo%20Culinario/Gemini_Generated_Image_q8noseq8noseq8no.png",
  "isActive": true,
  "categories_id": "550e8400-e29b-41d4-a716-446655440000",
  "caloricLevel": 5,
  "ingredients": ["carne", "grano", "verdura"]
}
Respuesta esperada: CÃ³digo: 201 Created Tipo: application/json Cuerpo:

json
{
  "id": "uuid-generado",
  "name": "Milanesa con arroz",
  "description": "Es una milanesa que ademÃ¡s tiene arroz. Es una milanesa con arroz.",
  "price": 450.0,
  "stock": 3,
  "imgUrl": "https://ik.imagekit.io/xiqknvpxxh/Lienzo%20Culinario/Gemini_Generated_Image_q8noseq8noseq8no.png",
  "isActive": true,
  "categories_id": "550e8400-e29b-41d4-a716-446655440000",
  "caloricLevel": 5,
  "ingredients": ["carne", "grano", "verdura"]
}
Errores esperados:

400 Bad Request si falta algÃºn campo obligatorio

422 Unprocessable Entity si el formato es incorrecto

ðŸ§ª Lista de pruebas para Thunder Client
MÃ©todo	URL	Body	Resultado esperado
GET	/products	â€”	Lista de productos (200 OK)
GET	/products/:id	â€”	Producto especÃ­fico (200 OK)
GET	/products/invalid-id	â€”	Error 404
POST	/products	JSON vÃ¡lido	Producto creado (201 Created)
POST	/products	JSON incompleto	Error 400 o 422